## MCMC settings
setts <- list('n.iter' = 100, 'n.thin' = 1, 'n.burn' = 50)
setts.m <- 1000
mSetts <- 1
if(mSetts) setts <- lapply(setts, function(v) v * setts.m)
setts$n.chains <- 3
## data
n <- 20
x <- runif(n, -1, 1)
X <- model.matrix(~ x)
beta <- c(2, -1)
mu <- crossprod(t(X), beta)
Y <- rpois(n, exp(mu))
dat <- list(Y = Y, X = X, n = n, np = ncol(X))
## model
glm.model <- function() {
for (i in 1:n) {
Y[i] ~ dpois(lambda[i])
log(lambda[i]) <- inprod(X[i,], beta[1, ])
}
for (j in 1:np) {
beta[1, j] ~ dnorm(0, 0.001)
}
}
## monitors; can add 'deviance' but left out here for easy plotting
params <- c('beta')
## fit with jags.fit
timer <- proc.time()
load.module('glm')
load.module('lecuyer')
load.module('dic')
m0 <- jags.fit(data = dat, params = params, model = glm.model,
n.chains = setts$n.chains,
n.adapt = 100,
n.update = setts$n.burn,
n.iter = setts$n.iter,
thin = setts$n.thin)
time.taken <- proc.time() - timer
timings[1] <- time.taken[3]
## fit with jags.parfit
timer <- proc.time()
cl <- makePSOCKcluster(n.cores)
tmp <- clusterEvalQ(cl, library(dclone))
parLoadModule(cl, 'glm')
parLoadModule(cl, 'lecuyer')
parLoadModule(cl, 'dic')
m1 <- jags.parfit(cl = cl, data = dat, params = params, model = glm.model,
n.chains = setts$n.chains,
n.adapt = 100,
n.update = setts$n.burn,
n.iter = setts$n.iter,
thin = setts$n.thin)
stopCluster(cl)
time.taken <- proc.time() - timer
timings[2] <- time.taken[3]
## fit with parJagsModel
timer <- proc.time()
cl <- makePSOCKcluster(n.cores)
parLoadModule(cl, 'glm')
parLoadModule(cl, 'lecuyer')
parLoadModule(cl, 'dic')
parJagsModel(cl = cl, name = 'res', file = glm.model, data = dat,
n.chains = setts$n.chains, n.adapt = 100)
parUpdate(cl = cl, object = 'res', n.iter = setts$n.burn)
m2 <- parCodaSamples(cl = cl, model = 'res', variable.names = params,
n.iter = setts$n.iter, thin = setts$n.thin)
stopCluster(cl)
time.taken <- proc.time() - timer
timings[3] <- time.taken[3]
## fit with foreach
timer <- proc.time()
cl <- makePSOCKcluster(n.cores)
clusterSetRNGStream(cl)
registerDoParallel(cl)
m3 <- foreach(i = 1:setts$n.chains, .packages = c('dclone', 'rjags'),
.combine = 'c', .final = mcmc.list) %dopar% {
load.module('glm')
load.module('lecuyer')
load.module('dic')
m <- jags.fit(data = dat, params = params, model = glm.model,
n.chains = 1,
n.adapt = 100,
n.update = setts$n.burn,
n.iter = setts$n.iter,
thin = setts$n.thin,
inits = list(.RNG.name = 'lecuyer::RngStream',
.RNG.seed = sample(1:1e6, 1)))
}
stopCluster(cl)
time.taken <- proc.time() - timer
timings[4] <- time.taken[3]
## fit with snow
timer <- proc.time()
coda.samples.wrapper <- function(i){
load.module('glm')
load.module('lecuyer')
load.module('dic')
m <- jags.fit(data = dat, params = params, model = glm.model,
n.chains = 1,
n.adapt = 100,
n.update = setts$n.burn,
n.iter = setts$n.iter,
thin = setts$n.thin,
inits = list(.RNG.name = 'lecuyer::RngStream',
.RNG.seed = sample(1:1e6, 1)))
}
cl <- makeCluster(n.cores, "SOCK")
clusterEvalQ(cl, library('dclone'))
clusterEvalQ(cl, library('rjags'))
clusterExport(cl, list('dat', 'params', 'glm.model', 'setts'))
m4 <- clusterApply(cl, 1:setts$n.chains, coda.samples.wrapper)
for(i in 1:length(m4)){ # reorganize 'm4' as an 'mcmc.list' object
m4[[i]] <- m4[[i]][[1]]
}
class(m4) <- "mcmc.list"
stopCluster(cl)
time.taken <- proc.time() - timer
timings[5] <- time.taken[3]
## fit with snowfall
timer <- proc.time()
sfInit(parallel = TRUE, cpus = n.cores)
sfLibrary(rjags)
sfLibrary(dclone)
sfExportAll()
m5 <- sfLapply(1:setts$n.chains, function(i) {
load.module('glm')
load.module('lecuyer')
load.module('dic')
m <- jags.fit(data = dat, params = params, model = glm.model,
n.chains = 1,
n.adapt = 100,
n.update = setts$n.burn,
n.iter = setts$n.iter,
thin = setts$n.thin,
inits = list(.RNG.name = 'lecuyer::RngStream',
.RNG.seed = sample(1:1e6, 1)))
})
sfStop()
for(i in 1:length(m5)){ # reorganize 'm5' as an 'mcmc.list' object
m5[[i]] <- m5[[i]][[1]]
}
class(m5) <- "mcmc.list"
time.taken <- proc.time() - timer
timings[6] <- time.taken[3]
timing
timings
library("glmmlasso")
library("glmmLasso")
data("soccer")
soccer[,c(4,5,9:16)]<-scale(soccer[,c(4,5,9:16)],center=TRUE,scale=TRUE)
soccer<-data.frame(soccer)
lm1 <- glmmLasso(points ~ transfer.spendings + ave.unfair.score
+ ball.possession + tackles
+ ave.attend + sold.out, rnd = list(team=~1),
lambda=10, data = soccer)
summary(lm1)
lm1
str(lm1)
help("glmmLasso")
lm1$loglik.vec
lm1$lambda.max
lm1$loglik
#change how alpha is specified?
#change some effects to be stronger?
generate.simulation <- function(Nstudies = 5, Ncovariate = 10, continuous.cov = c(1,2,4,6,7,8), pf = c(1,2,3,4,5), em = c(4,5),
b1 = c(0.1, -0.1, 0.2, 0.2, -0.2), b2 = c(0.2, 0.3)){
#treatment effect
d <- 1
sd <- 0.5 + 0.1 * rchisq(1, df = 1)
delta <- rnorm(Nstudies, d, sd)
studyid <- NULL
for(i in 1:Nstudies){
studyid <- c(studyid, rep(i, sample(50:100, size = 1)))
}
#study baseline effect
alpha <- runif(Nstudies, -1, 1)
epsilon <- rnorm(length(studyid), 0, 0.5)
treat <- rbinom(length(studyid), 1, 0.5)
#generating data
X <- matrix(NA, nrow = length(studyid), ncol = Ncovariate)
X[,continuous.cov] <- rnorm(length(studyid) * length(continuous.cov), 0, 1)
X[,-continuous.cov] <- rbinom(length(studyid)* (Ncovariate - length(continuous.cov)), 1, 0.5)
meany <- alpha[studyid] + epsilon + delta[studyid] * treat + X[,pf] %*% b1 + X[,em] %*% b2 * treat
sigmay <- 0.5
y <- rnorm(length(studyid), meany, sigmay)
data <- model.matrix(~ -1 +  X*treat)
data <- cbind(y = y, data = data, studyid = studyid)
data <- as.data.frame(data)
data$studyid <- as.factor(data$studyid)
return(data)
}
data <- generate.simulation()
flds <- createFolds(1:data_jags$Np, k = 5, list = TRUE, returnTrain = FALSE)
library("glmmLasso")
library(caret)
data <- generate.simulation()
flds <- createFolds(1:data_jags$Np, k = 5, list = TRUE, returnTrain = FALSE)
dim(data)
flds <- createFolds(1:dim(data)[1], k = 5, list = TRUE, returnTrain = FALSE)
data <- generate.simulation()
flds <- createFolds(1:dim(data)[1], k = 5, list = TRUE, returnTrain = FALSE)
lambda <- seq(500, 0, by = -1)
flds
train_index <- unlist(sapply(c(1:fold_num)[-i], function(x) flds[[x]]))
test_index <- flds[[i]]
train_index <- train_index[order(train_index)]
test_index <- test_index[order(test_index)]
flds <- createFolds(1:dim(data)[1], k = 5, list = TRUE, returnTrain = FALSE)
lambda <- seq(500, 0, by = -1)
i = 1
train_index <- unlist(sapply(c(1:fold_num)[-i], function(x) flds[[x]]))
test_index <- flds[[i]]
train_index <- train_index[order(train_index)]
test_index <- test_index[order(test_index)]
flds <- createFolds(1:dim(data)[1], k = 5, list = TRUE, returnTrain = FALSE)
lambda <- seq(500, 0, by = -1)
train_index <- unlist(sapply(c(1:fold_num)[-i], function(x) flds[[x]]))
train_index <- unlist(sapply(c(1:length(flds))[-i], function(x) flds[[x]]))
test_index <- flds[[i]]
train_index <- train_index[order(train_index)]
test_index <- test_index[order(test_index)]
train_index
str(data)
lambda <- seq(500, 0, by = -1)
glm1 <- glmmLasso(y ~ as.factor(studyid) + X1 + X2 + X3 + X4 + X5 + X6 + X7 + X8 + X9 + X10 + X1_treat + X2_treat + X3_treat +X4_treat + X5_treat + X6_treat + X7_treat + X8_treat + X9_treat + X10_treat + treat,
rnd = list(studyid =~ -1 + treat),
family = gaussian(link = "identity"),
lambda = lambda[i],
data = data[train_index])
glm1 <- glmmLasso(y ~ as.factor(studyid) + X1 + X2 + X3 + X4 + X5 + X6 + X7 + X8 + X9 + X10 + X1_treat + X2_treat + X3_treat +X4_treat + X5_treat + X6_treat + X7_treat + X8_treat + X9_treat + X10_treat + treat,
rnd = list(studyid =~ -1 + treat),
family = gaussian(link = "identity"),
lambda = lambda[i],
data = data[,train_index])
glm1 <- glmmLasso(y ~ as.factor(studyid) + X1 + X2 + X3 + X4 + X5 + X6 + X7 + X8 + X9 + X10 + X1_treat + X2_treat + X3_treat +X4_treat + X5_treat + X6_treat + X7_treat + X8_treat + X9_treat + X10_treat + treat,
rnd = list(studyid =~ -1 + treat),
family = gaussian(link = "identity"),
lambda = lambda[i],
data = data[train_index,])
data <- generate.simulation()
colnames(data) <- gsub(":", "_", colnames(data))
flds <- createFolds(1:dim(data)[1], k = 5, list = TRUE, returnTrain = FALSE)
lambda <- seq(500, 0, by = -1)
train_index <- unlist(sapply(c(1:length(flds))[-i], function(x) flds[[x]]))
test_index <- flds[[i]]
train_index <- train_index[order(train_index)]
test_index <- test_index[order(test_index)]
glm1 <- glmmLasso(y ~ as.factor(studyid) + X1 + X2 + X3 + X4 + X5 + X6 + X7 + X8 + X9 + X10 + X1_treat + X2_treat + X3_treat +X4_treat + X5_treat + X6_treat + X7_treat + X8_treat + X9_treat + X10_treat + treat,
rnd = list(studyid =~ -1 + treat),
family = gaussian(link = "identity"),
lambda = lambda[i],
data = data[train_index,])
predict(glm1)
predict(glm1, data[test_index,])
data$y
summary(glm1)
i = 400
train_index <- unlist(sapply(c(1:length(flds))[-i], function(x) flds[[x]]))
test_index <- flds[[i]]
train_index <- train_index[order(train_index)]
test_index <- test_index[order(test_index)]
glm1 <- glmmLasso(y ~ as.factor(studyid) + X1 + X2 + X3 + X4 + X5 + X6 + X7 + X8 + X9 + X10 + X1_treat + X2_treat + X3_treat +X4_treat + X5_treat + X6_treat + X7_treat + X8_treat + X9_treat + X10_treat + treat,
rnd = list(studyid =~ -1 + treat),
family = gaussian(link = "identity"),
lambda = lambda[i],
data = data[train_index,])
summary(glm1)
predict(glm1, data[test_index,])
data <- generate.simulation()
colnames(data) <- gsub(":", "_", colnames(data))
flds <- createFolds(1:dim(data)[1], k = 5, list = TRUE, returnTrain = FALSE)
lambda <- seq(500, 0, by = -1)
mse <- rep(NA, length(flds))
for(i in 1:length(flds)){
train_index <- unlist(sapply(c(1:length(flds))[-i], function(x) flds[[x]]))
test_index <- flds[[i]]
train_index <- train_index[order(train_index)]
test_index <- test_index[order(test_index)]
glm1 <- glmmLasso(y ~ as.factor(studyid) + X1 + X2 + X3 + X4 + X5 + X6 + X7 + X8 + X9 + X10 + X1_treat + X2_treat + X3_treat +X4_treat + X5_treat + X6_treat + X7_treat + X8_treat + X9_treat + X10_treat + treat,
rnd = list(studyid =~ -1 + treat),
family = gaussian(link = "identity"),
lambda = lambda[i],
data = data[train_index,])
mse[i] <- (data$y[test_index] - predict(glm1, data[test_index,]))^2
}
data <- generate.simulation()
colnames(data) <- gsub(":", "_", colnames(data))
flds <- createFolds(1:dim(data)[1], k = 5, list = TRUE, returnTrain = FALSE)
lambda <- seq(500, 0, by = -1)
mse <- rep(NA, length(flds))
for(i in 1:length(flds)){
train_index <- unlist(sapply(c(1:length(flds))[-i], function(x) flds[[x]]))
test_index <- flds[[i]]
train_index <- train_index[order(train_index)]
test_index <- test_index[order(test_index)]
glm1 <- glmmLasso(y ~ as.factor(studyid) + X1 + X2 + X3 + X4 + X5 + X6 + X7 + X8 + X9 + X10 + X1_treat + X2_treat + X3_treat +X4_treat + X5_treat + X6_treat + X7_treat + X8_treat + X9_treat + X10_treat + treat,
rnd = list(studyid =~ -1 + treat),
family = gaussian(link = "identity"),
lambda = lambda[i],
data = data[train_index,])
mse[i] <- mean((data$y[test_index] - predict(glm1, data[test_index,]))^2)
}
mse
calculate_5foldCV <- function(lambda, flds, data){
for(i in 1:length(flds)){
train_index <- unlist(sapply(c(1:length(flds))[-i], function(x) flds[[x]]))
test_index <- flds[[i]]
train_index <- train_index[order(train_index)]
test_index <- test_index[order(test_index)]
glm1 <- glmmLasso(y ~ as.factor(studyid) + X1 + X2 + X3 + X4 + X5 + X6 + X7 + X8 + X9 + X10 + X1_treat + X2_treat + X3_treat +X4_treat + X5_treat + X6_treat + X7_treat + X8_treat + X9_treat + X10_treat + treat,
rnd = list(studyid =~ -1 + treat),
family = gaussian(link = "identity"),
lambda = lambda,
data = data[train_index,])
mse[i] <- mean((data$y[test_index] - predict(glm1, data[test_index,]))^2)
}
mean(mse)
}
sapply(lambda, calculate_5_foldCV, flds = flds, data = data)
calculate_5foldCV <- function(lambda, flds, data){
for(i in 1:length(flds)){
train_index <- unlist(sapply(c(1:length(flds))[-i], function(x) flds[[x]]))
test_index <- flds[[i]]
train_index <- train_index[order(train_index)]
test_index <- test_index[order(test_index)]
glm1 <- glmmLasso(y ~ as.factor(studyid) + X1 + X2 + X3 + X4 + X5 + X6 + X7 + X8 + X9 + X10 + X1_treat + X2_treat + X3_treat +X4_treat + X5_treat + X6_treat + X7_treat + X8_treat + X9_treat + X10_treat + treat,
rnd = list(studyid =~ -1 + treat),
family = gaussian(link = "identity"),
lambda = lambda,
data = data[train_index,])
mse[i] <- mean((data$y[test_index] - predict(glm1, data[test_index,]))^2)
}
mean(mse)
}
sapply(lambda, calculate_5_foldCV, flds = flds, data = data)
sapply(lambda, calculate_5foldCV, flds = flds, data = data)
lambda <- seq(3, 0, by = -1)
a <- sapply(lambda, calculate_5foldCV, flds = flds, data = data)
a
sd(mse)
for(i in 1:length(flds)){
train_index <- unlist(sapply(c(1:length(flds))[-i], function(x) flds[[x]]))
test_index <- flds[[i]]
train_index <- train_index[order(train_index)]
test_index <- test_index[order(test_index)]
glm1 <- glmmLasso(y ~ as.factor(studyid) + X1 + X2 + X3 + X4 + X5 + X6 + X7 + X8 + X9 + X10 + X1_treat + X2_treat + X3_treat +X4_treat + X5_treat + X6_treat + X7_treat + X8_treat + X9_treat + X10_treat + treat,
rnd = list(studyid =~ -1 + treat),
family = gaussian(link = "identity"),
lambda = lambda,
data = data[train_index,])
mse[i] <- mean((data$y[test_index] - predict(glm1, data[test_index,]))^2)
}
calculate_5foldCV <- function(lambda, flds, data){
for(i in 1:length(flds)){
train_index <- unlist(sapply(c(1:length(flds))[-i], function(x) flds[[x]]))
test_index <- flds[[i]]
train_index <- train_index[order(train_index)]
test_index <- test_index[order(test_index)]
glm1 <- glmmLasso(y ~ as.factor(studyid) + X1 + X2 + X3 + X4 + X5 + X6 + X7 + X8 + X9 + X10 + X1_treat + X2_treat + X3_treat +X4_treat + X5_treat + X6_treat + X7_treat + X8_treat + X9_treat + X10_treat + treat,
rnd = list(studyid =~ -1 + treat),
family = gaussian(link = "identity"),
lambda = lambda,
data = data[train_index,])
mse[i] <- mean((data$y[test_index] - predict(glm1, data[test_index,]))^2)
}
c(mean(mse), sd(mse)/sqrt(length(mse)))
}
a <- sapply(lambda, calculate_5foldCV, flds = flds, data = data)
a
a <- sapply(lambda, calculate_5foldCV, flds = flds, data = data)
calculate_5foldCV <- function(lambda, flds, data){
for(i in 1:length(flds)){
train_index <- unlist(sapply(c(1:length(flds))[-i], function(x) flds[[x]]))
test_index <- flds[[i]]
train_index <- train_index[order(train_index)]
test_index <- test_index[order(test_index)]
glm1 <- glmmLasso(y ~ as.factor(studyid) + X1 + X2 + X3 + X4 + X5 + X6 + X7 + X8 + X9 + X10 + X1_treat + X2_treat + X3_treat +X4_treat + X5_treat + X6_treat + X7_treat + X8_treat + X9_treat + X10_treat + treat,
rnd = list(studyid =~ -1 + treat),
family = gaussian(link = "identity"),
lambda = lambda,
data = data[train_index,])
mse[i] <- mean((data$y[test_index] - predict(glm1, data[test_index,]))^2)
}
matrix((mean(mse), sd(mse)/sqrt(length(mse))), ncol = 2)
}
a <- sapply(lambda, calculate_5foldCV, flds = flds, data = data)
calculate_5foldCV <- function(lambda, flds, data){
for(i in 1:length(flds)){
train_index <- unlist(sapply(c(1:length(flds))[-i], function(x) flds[[x]]))
test_index <- flds[[i]]
train_index <- train_index[order(train_index)]
test_index <- test_index[order(test_index)]
glm1 <- glmmLasso(y ~ as.factor(studyid) + X1 + X2 + X3 + X4 + X5 + X6 + X7 + X8 + X9 + X10 + X1_treat + X2_treat + X3_treat +X4_treat + X5_treat + X6_treat + X7_treat + X8_treat + X9_treat + X10_treat + treat,
rnd = list(studyid =~ -1 + treat),
family = gaussian(link = "identity"),
lambda = lambda,
data = data[train_index,])
mse[i] <- mean((data$y[test_index] - predict(glm1, data[test_index,]))^2)
}
matrix(c(mean(mse), sd(mse)/sqrt(length(mse))), ncol = 2)
}
a
a <- lapply(lambda, calculate_5foldCV, flds = flds, data = data)
a
unlist(a)
rbind(a)
cbind(a)
a <- sapply(lambda, calculate_5foldCV, flds = flds, data = data)
a
lambda <- seq(50, 0, by = -1)
mse <- rep(NA, length(flds))
a <- sapply(lambda, calculate_5foldCV, flds = flds, data = data)
best_lambda <- which.min(a[1,])
best_lambda
a
lambda[50]
glm1 <- glmmLasso(y ~ as.factor(studyid) + X1 + X2 + X3 + X4 + X5 + X6 + X7 + X8 + X9 + X10 + X1_treat + X2_treat + X3_treat +X4_treat + X5_treat + X6_treat + X7_treat + X8_treat + X9_treat + X10_treat + treat,
rnd = list(studyid =~ -1 + treat),
family = gaussian(link = "identity"),
lambda = 1,
data = data[train_index,])
sumamry(glm1)
summary(glm1)
plot(a[1,], 1:51)
plot(1:51, a[1,])
plot(lambda[1:51], a[1,])
glm1 <- glmmLasso(y ~ as.factor(studyid) + X1 + X2 + X3 + X4 + X5 + X6 + X7 + X8 + X9 + X10 + X1_treat + X2_treat + X3_treat +X4_treat + X5_treat + X6_treat + X7_treat + X8_treat + X9_treat + X10_treat + treat,
rnd = list(studyid =~ -1 + treat),
family = gaussian(link = "identity"),
lambda = 1,
data = data[train_index,], index = c(1:20, NA))
train_index <- unlist(sapply(c(1:length(flds))[-i], function(x) flds[[x]]))
test_index <- flds[[i]]
train_index <- train_index[order(train_index)]
test_index <- test_index[order(test_index)]
glmmLassoControl(index = c(1:20, NA))
glm1 <- glmmLasso(y ~ as.factor(studyid) + X1 + X2 + X3 + X4 + X5 + X6 + X7 + X8 + X9 + X10 + X1_treat + X2_treat + X3_treat +X4_treat + X5_treat + X6_treat + X7_treat + X8_treat + X9_treat + X10_treat + treat,
rnd = list(studyid =~ -1 + treat),
family = gaussian(link = "identity"),
lambda = lambda,
data = data[train_index,])
summary(glm1)
glmmLassoControl(index = c(1:21, NA))
glm1 <- glmmLasso(y ~ as.factor(studyid) + X1 + X2 + X3 + X4 + X5 + X6 + X7 + X8 + X9 + X10 + X1_treat + X2_treat + X3_treat +X4_treat + X5_treat + X6_treat + X7_treat + X8_treat + X9_treat + X10_treat + treat,
rnd = list(studyid =~ -1 + treat),
family = gaussian(link = "identity"),
lambda = lambda,
data = data[train_index,])
glm1 <- glmmLasso(y ~ as.factor(studyid) + X1 + X2 + X3 + X4 + X5 + X6 + X7 + X8 + X9 + X10 + X1_treat + X2_treat + X3_treat +X4_treat + X5_treat + X6_treat + X7_treat + X8_treat + X9_treat + X10_treat + treat,
rnd = list(studyid =~ -1 + treat),
family = gaussian(link = "identity"),
lambda = lambda,
data = data[train_index,], control=list(index = c(1:20, NA)))
glm1 <- glmmLasso(y ~ as.factor(studyid) + X1 + X2 + X3 + X4 + X5 + X6 + X7 + X8 + X9 + X10 + X1_treat + X2_treat + X3_treat +X4_treat + X5_treat + X6_treat + X7_treat + X8_treat + X9_treat + X10_treat + treat,
rnd = list(studyid =~ -1 + treat),
family = gaussian(link = "identity"),
lambda = lambda,
data = data[train_index,], control=list(index = c(1:25, NA)))
rnd = list(studyid =~ -1 + treat),
family = gaussian(link = "identity"),
lambda = lambda,
data = data[train_index,], control=list(index = c(1:24, NA)))
glm1 <- glmmLasso(y ~ as.factor(studyid) + X1 + X2 + X3 + X4 + X5 + X6 + X7 + X8 + X9 + X10 + X1_treat + X2_treat + X3_treat +X4_treat + X5_treat + X6_treat + X7_treat + X8_treat + X9_treat + X10_treat + treat,
rnd = list(studyid =~ -1 + treat),
family = gaussian(link = "identity"),
lambda = lambda,
data = data[train_index,], control=list(index = c(1:24, NA)))
glm1 <- glmmLasso(y ~ as.factor(studyid) + X1 + X2 + X3 + X4 + X5 + X6 + X7 + X8 + X9 + X10 + X1_treat + X2_treat + X3_treat +X4_treat + X5_treat + X6_treat + X7_treat + X8_treat + X9_treat + X10_treat + treat,
rnd = list(studyid =~ -1 + treat),
family = gaussian(link = "identity"),
lambda = lambda,
data = data[train_index,], control=list(index = c(1:20, NA)))
glm1 <- glmmLasso(y ~ as.factor(studyid) + X1 + X2 + X3 + X4 + X5 + X6 + X7 + X8 + X9 + X10 + X1_treat + X2_treat + X3_treat +X4_treat + X5_treat + X6_treat + X7_treat + X8_treat + X9_treat + X10_treat + treat,
rnd = list(studyid =~ -1 + treat),
family = gaussian(link = "identity"),
lambda = lambda,
data = data[train_index,], control=list(index = c(1:21, NA)))
summary(glm1)
summary(glm1)
glm1 <- glmmLasso(y ~ as.factor(studyid) + X1 + X2 + X3 + X4 + X5 + X6 + X7 + X8 + X9 + X10 + X1_treat + X2_treat + X3_treat +X4_treat + X5_treat + X6_treat + X7_treat + X8_treat + X9_treat + X10_treat + treat,
rnd = list(studyid =~ -1 + treat),
family = gaussian(link = "identity"),
lambda = 50,
data = data[train_index,], control=list(index = c(1:21, NA)))
summary(glm1)
help(cv.glmnet)
libray(glmnet)
library(glmnet)
help(cv.glmnet)
# Give the chart file a name.
png(file = "dbinom.png")
# Create a sample of 50 numbers which are incremented by 1.
x <- seq(0,50,by = 1)
# Create the binomial distribution.
y <- dbinom(x,50,0.5)
# Plot the graph for this sample.
plot(x,y)
# Create a sample of 50 numbers which are incremented by 1.
x <- seq(0,50,by = 1)
# Create the binomial distribution.
y <- dbinom(x,50,0.5)
plot(x,y)
help(step)
library(bnma)
network <- with(parkinsons, network.data(Outcomes, Study, Treat, SE = SE, response = "normal"))
network$code
cat(network$code)
setwd("~/GitHub/bnma")
devtools::document()
library(bnma)
thrombolytic
devtools::document()
